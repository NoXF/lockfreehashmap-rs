initSidebarItems({"enum":[["KeyCompare","Sometimes when calling `put_if_match()` we want to insert a key and sometimes we just want to compare it with some variable of type `Q`. This enum represents which one is intended."],["KeySlot","The hash map is implemented as an array of key-value pairs, where each key and value can be one of several states. This enum represents the various states that a key can be in, excluding the null/empty state."],["Match","Sometimes, when inserting a new value into the hash map, we only want to insert something if the value already matches something."],["PutValue","This enum represents the value to insert when calling `put_if_match()`, which is usually owned when called from `LockFreeHashMap` and shared if its been copied from a previous, smaller map."],["QRef","See `KeyCompare::as_qref()` for the motivation behind this type."],["QRef2","See `KeyCompare::as_qref()` for the motivation behind this type."],["ValueSlot","The hash map is implemented as an array of key-value pairs, where each key and value can be one of several states. This enum represents the various states that a value can be in, excluding the null/empty state."]],"struct":[["MapInner","A map containing a unique, non-resizable array to the Key/Value pairs. If the map needs to be resized, a new `MapInner` must be created and its Key/Value pairs must be copied from this one. Logically, this struct owns its keys and values, and so is responsible for freeing them when dropped."]],"type":[["KVPair",""]]});